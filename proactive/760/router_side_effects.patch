diff --git a/src/Extra/org/objectweb/proactive/extra/messagerouting/protocol/message/ErrorMessage.java b/src/Extra/org/objectweb/proactive/extra/messagerouting/protocol/message/ErrorMessage.java
index 0f52a4b..e445827 100644
--- a/src/Extra/org/objectweb/proactive/extra/messagerouting/protocol/message/ErrorMessage.java
+++ b/src/Extra/org/objectweb/proactive/extra/messagerouting/protocol/message/ErrorMessage.java
@@ -32,10 +32,13 @@
  */
 package org.objectweb.proactive.extra.messagerouting.protocol.message;
 
-import org.objectweb.proactive.core.remoteobject.http.util.HttpMarshaller;
+import java.util.HashMap;
+import java.util.Map;
+
 import org.objectweb.proactive.extra.messagerouting.exceptions.MalformedMessageException;
 import org.objectweb.proactive.extra.messagerouting.protocol.AgentID;
 import org.objectweb.proactive.extra.messagerouting.protocol.TypeHelper;
+import org.objectweb.proactive.extra.messagerouting.protocol.message.Message.Field;
 import org.objectweb.proactive.extra.messagerouting.protocol.message.Message.MessageType;
 
 
@@ -44,6 +47,9 @@ import org.objectweb.proactive.extra.messagerouting.protocol.message.Message.Mes
  * Error message are used to notify error to the agent. Several {@link ErrorType} exist.
  * Each one indicate a special type of error.
  * 
+ * Within the current implementation, {@link MessageType#ERR_} is a {@link DataMessage} with the payload
+ * 	being an integer which identifies the error code.
+ * 
  * @since ProActive 4.1.0
  */
 public class ErrorMessage extends DataMessage {
@@ -118,10 +124,19 @@ public class ErrorMessage extends DataMessage {
          */
         ERR_MALFORMED_MESSAGE;
 
-        public byte[] toByteArray() {
-            byte[] buf = new byte[4];
-            TypeHelper.intToByteArray(this.ordinal(), buf, 0);
-            return buf;
+        /** Reverse map associating an error type to an ID  */
+        final static Map<Integer, ErrorType> idToErrorType;
+        static {
+            // Can't populate idToErrorType from constructor since enums are initialized before 
+            // any static initializers are run. It is safe to do it from this static block
+            idToErrorType = new HashMap<Integer, ErrorType>();
+            for (ErrorType errorType : values()) {
+                idToErrorType.put(errorType.ordinal(), errorType);
+            }
+        }
+
+        public static ErrorType getErrorType(int value) {
+            return idToErrorType.get(value);
         }
 
         @Override
@@ -148,6 +163,25 @@ public class ErrorMessage extends DataMessage {
     /** The type of this error message */
     final private ErrorType error;
 
+    /** Read the error type from the payload field of a raw message
+     * It is assumed that the payload of an error message
+     * 	is four bytes long, containing an encoded int
+     *  
+     * @throws MalformedMessageException - if the payload contains an unrecognized error code
+     * @throws IllegalArgumentException - if the payload is not a four-bytes buffer 
+     * */
+    static public ErrorType readErrorType(byte[] payload) throws MalformedMessageException {
+        if (payload.length != 4)
+            throw new IllegalArgumentException("The payload is not four-bytes long");
+
+        int errorCode = TypeHelper.byteArrayToInt(payload, 0);
+        ErrorType type = ErrorType.getErrorType(errorCode);
+        if (type != null)
+            return type;
+        else
+            throw new MalformedMessageException("Invalid value for the error code: " + errorCode);
+    }
+
     /** Create an error message
      *
      * @param recipient 
@@ -160,7 +194,9 @@ public class ErrorMessage extends DataMessage {
      * 		The error type
      */
     public ErrorMessage(ErrorType error, AgentID recipient, AgentID faulty, long msgID) {
-        super(MessageType.ERR_, faulty, recipient, msgID, HttpMarshaller.marshallObject(error));
+        super(MessageType.ERR_, faulty, recipient, msgID, new byte[Integer.SIZE / 8]);
+        // fill in the payload
+        TypeHelper.intToByteArray(error.ordinal(), this.data, 0);
         this.error = error;
     }
 
@@ -182,11 +218,15 @@ public class ErrorMessage extends DataMessage {
                 "Invalid value for the " + Message.Field.MSG_TYPE + " field:" + this.getType());
         }
 
+        // read the error code
         try {
-            this.error = (ErrorType) HttpMarshaller.unmarshallObject(this.getData());
-        } catch (ClassCastException e) {
+            this.error = readErrorType(this.getData());
+        } catch (MalformedMessageException e) {
             throw new MalformedMessageException("Malformed" + MessageType.ERR_ + " message:" +
-                "Invalid error type:", e);
+                "Invalid payload content: " + e.getMessage(), e);
+        } catch (IllegalArgumentException e) {
+            throw new MalformedMessageException("Malformed " + this.getType() + " message:" +
+                "Invalid payload content: " + e.getMessage(), e);
         }
     }
 
