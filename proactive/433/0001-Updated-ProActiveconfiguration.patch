From 0025057da8c44eda23c0ddce57cad533342002d1 Mon Sep 17 00:00:00 2001
From: cmathieu <clement.mathieu@sophia.inria.fr>
Date: Thu, 10 Jul 2008 16:51:05 +0200
Subject: [PATCH] Updated ProActiveconfiguration:

- Only not ProActive property defined in a config file are exported as System Properties
- When the class is unloaded, properties are unset
- Cleaner implementation
---
 src/Core/org/objectweb/proactive/Main.java         |    2 +
 .../org/objectweb/proactive/core/Constants.java    |    8 +-
 .../core/config/ProActiveConfiguration.java        |  232 ++++++++++++--------
 .../config/xml/ProActiveConfigurationParser.java   |    4 +
 4 files changed, 154 insertions(+), 92 deletions(-)

diff --git a/src/Core/org/objectweb/proactive/Main.java b/src/Core/org/objectweb/proactive/Main.java
index d333864..0a302b3 100644
--- a/src/Core/org/objectweb/proactive/Main.java
+++ b/src/Core/org/objectweb/proactive/Main.java
@@ -31,6 +31,7 @@
 package org.objectweb.proactive;
 
 import org.objectweb.proactive.api.PAVersion;
+import org.objectweb.proactive.core.Constants;
 import org.objectweb.proactive.core.config.PAProperties;
 import org.objectweb.proactive.core.util.ProActiveInet;
 import org.objectweb.proactive.core.util.URIBuilder;
@@ -57,6 +58,7 @@ public class Main {
         String localAddress = null;
         localAddress = URIBuilder.getHostNameorIP(ProActiveInet.getInstance().getInetAddress());
         System.out.println("Local IP Address: " + localAddress);
+        System.out.println("Config dir: " + Constants.USER_CONFIG_DIR);
         System.out.println("Available properties:");
         for (PAProperties p : PAProperties.values()) {
             String type = p.isBoolean() ? "Boolean" : "String";
diff --git a/src/Core/org/objectweb/proactive/core/Constants.java b/src/Core/org/objectweb/proactive/core/Constants.java
index 928f503..8389b8d 100644
--- a/src/Core/org/objectweb/proactive/core/Constants.java
+++ b/src/Core/org/objectweb/proactive/core/Constants.java
@@ -30,6 +30,9 @@
  */
 package org.objectweb.proactive.core;
 
+import java.io.File;
+
+
 /**
  * Defines many constants useful across ProActive
  *
@@ -91,8 +94,9 @@ public interface Constants {
     // list of system properties used within proactive
     public static final String SSH_TUNNELING_DEFAULT_KNOW_HOSTS = "/.ssh/known_hosts";
 
-    /** this property indicates to send JMX notifications */
-    public static final String USER_CONFIG_DIR = ".proactive";
+    /** User configuration directory */
+    public static final String USER_CONFIG_DIR = System.getProperty("user.home") + File.separator +
+        ".proactive";
 
     /** The name of nodes created by a GCM Deployment
      *
diff --git a/src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.java b/src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.java
index 770ce73..dffdc99 100644
--- a/src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.java
+++ b/src/Core/org/objectweb/proactive/core/config/ProActiveConfiguration.java
@@ -31,10 +31,9 @@
 package org.objectweb.proactive.core.config;
 
 import java.io.File;
-import java.util.Collections;
-import java.util.Iterator;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Properties;
-import java.util.Vector;
 
 import org.apache.log4j.Logger;
 import org.objectweb.proactive.core.Constants;
@@ -44,162 +43,215 @@ import org.objectweb.proactive.core.util.log.ProActiveLogger;
 
 
 /**
- * Configuration parameters may be overriden according to the following priorities:</br> ">"
- * meaning "configuration parameters defined on the left override those defined on the right", we
- * have: </br> JVM > custom config file > default config file
- *
+ * One and only one ProActiveConfiguration object is associated to each ProActive Runtime. It
+ * contains the value of all the properties known by ProActive.
+ * 
+ * Configuration parameters may be overriden according to the following priorities:</br>
+ * <ol>
+ * <li>System Java Properties</li>
+ * <li>Custom configuration file</li>
+ * <li>Default configuration file</li>
+ * </ol>
+ * 
  */
 public class ProActiveConfiguration {
-    protected static Properties properties;
+    /** The ProActive Configuration associated to this ProActive Runtime */
+    protected static ProActiveConfiguration singleton;
+
+    /** All the known properties */
+    protected final CustomProperties properties;
+
+    /**
+     * Default configuration file
+     * 
+     * Must be in the same package than this class
+     */
     protected static final String PROACTIVE_CONFIG_FILENAME = "ProActiveConfiguration.xml";
+
+    /**
+     * Default log4j configuration file
+     * 
+     * Must be in the same package than this class
+     */
     public static final String PROACTIVE_LOG_PROPERTIES_FILE = "ProActiveLoggers.properties";
+
+    /** User configuration directory */
     protected static final String PROACTIVE_USER_CONFIG_FILENAME = Constants.USER_CONFIG_DIR +
         File.separator + PROACTIVE_CONFIG_FILENAME;
 
-    protected static ProActiveConfiguration singleton;
-    protected static boolean isLoaded = false;
-    protected static Logger logger = ProActiveLogger.getLogger(Loggers.CONFIGURATION);
+    protected final Logger logger = ProActiveLogger.getLogger(Loggers.CONFIGURATION);
 
-    static {
-        singleton = new ProActiveConfiguration();
+    synchronized static public ProActiveConfiguration getInstance() {
+        if (singleton == null) {
+            singleton = new ProActiveConfiguration();
+        }
+        return singleton;
     }
 
     private ProActiveConfiguration() {
-        load();
-    }
-
-    public static ProActiveConfiguration getInstance() {
-        return singleton;
-    }
+        this.properties = new CustomProperties();
 
-    /**
-     * Load the configuration, first look for user defined configuration files, firstly in the
-     * system property Constants.PROPERTY_PA_CONFIGURATION_FILE, then a file called
-     * .ProActiveConfiguration.xml at the user homedir. The default file is located in the same
-     * directory as the ProActiceConfiguration class with the name proacticeConfiguration It is
-     * obtained using <code>Class.getRessource()</code> If the property proactive.configuration is set then its
-     * value is used as the configuration file
-     */
-    public synchronized static void load() {
-        if (!isLoaded) {
+        /* Properties are set from the lower priority to the higher priority sources. */
 
-            checkSystemProperties();
+        // 1- Default config file
+        this.properties.putAllFromConfigFile(this.getDefaultProperties());
 
-            // loading default values
-            String filename = ProActiveConfiguration.class.getResource(PROACTIVE_CONFIG_FILENAME).toString();
+        // 2- User config file
+        this.properties.putAllFromSystem(this.getUserProperties());
 
-            properties = ProActiveConfigurationParser.parse(filename, new Properties());
+        // 3- System java properties
+        this.properties.putAll(this.getsystemProperties());
+    }
 
-            filename = null;
+    class CustomProperties extends Properties {
+        HashMap<String, String> exportedKeys = new HashMap<String, String>();
 
-            /* First we look for the user defined properties */
-            if (System.getProperty(PAProperties.PA_CONFIGURATION_FILE.getKey()) != null) {
-                // if specified as a system property
-                filename = System.getProperty(PAProperties.PA_CONFIGURATION_FILE.getKey());
-            } else {
-                // or if the file exists in the user home dir
-                File f = new File(System.getProperty("user.home") + File.separator +
-                    PROACTIVE_USER_CONFIG_FILENAME);
-                if (f.exists()) {
-                    filename = f.getAbsolutePath();
-                }
+        public synchronized void putAllFromSystem(Map<? extends Object, ? extends Object> t) {
+            for (Map.Entry<? extends Object, ? extends Object> entry : t.entrySet()) {
+                put(entry.getKey(), entry.getValue(), false);
             }
+        }
 
-            if (filename != null) {
-                // override default properties by the ones defined by the user
-                logger.debug("using user configuration file : " + filename);
-                properties = ProActiveConfigurationParser.parse(filename, properties);
-            } else {
-                logger.debug("no user configuration file");
+        public synchronized void putAllFromConfigFile(Map<? extends Object, ? extends Object> t) {
+            for (Map.Entry<? extends Object, ? extends Object> entry : t.entrySet()) {
+                put(entry.getKey(), entry.getValue(), true);
             }
+        }
 
-            // set the properties
-            setProperties(properties);
-
-            logger.debug("default configuration file " + filename);
+        public synchronized Object put(Object keyO, Object valueO, boolean exportAsSystem) {
+            String key = (String) keyO;
+            String value = (String) valueO;
 
-            isLoaded = true;
-        }
-    }
+            /*
+             * Check the value of this property is valid according to its type.
+             * 
+             * If the value is invalid, a warning message is printed and the value is SET.
+             */
 
-    static private void checkSystemProperties() {
-        Iterator<Object> it = System.getProperties().keySet().iterator();
-        while (it.hasNext()) {
-            String key = (String) it.next();
             PAProperties prop = PAProperties.getProperty(key);
             if (prop != null) {
-                String value = System.getProperty(key);
                 if (!prop.isValid(value)) {
                     logger.warn("Invalid value, " + value + " for key " + key + ". Must be a " +
                         prop.getType().toString());
                 }
             } else {
+                // This property is not known by ProActive
                 if (key.startsWith("proactive.")) {
                     logger.warn("Property " + key + " is not declared inside " +
                         PAProperties.class.getSimpleName() + " , ignoring");
                 } else {
                     logger.debug("System property " + key + " is not a ProActive property");
+                    if (exportAsSystem) {
+                        // it's not a proactive property and it was defined in a config file, so it need to be exported
+                        logger.debug("Exported <" + key + ", " + value + "> as System property");
+
+                        exportedKeys.put(key, System.getProperty(key));
+                        System.setProperty(key, value);
+                    }
                 }
             }
+
+            logger.debug("key:" + key + " --> value:" + value + (this.get(key) == null ? "" : " (OVERRIDE)"));
+
+            return this.put(keyO, valueO);
+        }
+
+        @Override
+        protected void finalize() throws Throwable {
+            logger.warn("FINALIZE CALLED");
+
+            for (String key : exportedKeys.keySet()) {
+                System.setProperty(key, exportedKeys.get(key));
+            }
+            exportedKeys = null;
+
+            super.finalize();
         }
     }
 
     /**
-     * Add the loaded properties to the system
+     * Load the configuration, first look for user defined configuration files, firstly in the
+     * system property Constants.PROPERTY_PA_CONFIGURATION_FILE, then a file called
+     * .ProActiveConfiguration.xml at the user homedir. The default file is located in the same
+     * directory as the ProActiceConfiguration class with the name proacticeConfiguration It is
+     * obtained using <code>Class.getRessource()</code> If the property proactive.configuration is
+     * set then its value is used as the configuration file
      */
-    protected static void setProperties(Properties properties) {
-        // order the properties by name
-        // increase output readability
-        Vector<String> v = new Vector(properties.keySet());
-        Collections.sort(v);
-        Iterator<String> it = v.iterator();
-
-        while (it.hasNext()) {
-            String key = it.next();
-            String value = properties.getProperty(key);
-
-            if (System.getProperty(key) == null) {
-                logger.debug("key:" + key + " --> value:" + value);
-                System.setProperty(key, value);
-            } else {
-                logger.debug("do not override " + key + ":" + System.getProperty(key) + " with value:" +
-                    value);
-            }
-        }
+    public synchronized static void load() {
+        // Load them all !
+        getInstance();
     }
 
     /**
      * returns the value of a property or null
-     *
+     * 
      * @param property
      *            the property
      * @return the value of the property
      */
     public String getProperty(String property) {
-        return System.getProperty(property);
+        return this.properties.getProperty(property);
     }
 
     /**
      * returns the value of a property or the default value
-     *
+     * 
      * @param property
      *            the property
      * @return the value of the property or the default value if the property does not exist
      */
     public String getProperty(String property, String defaultValue) {
-        return System.getProperty(property, defaultValue);
+        return this.properties.getProperty(property, defaultValue);
     }
 
     /**
      * set the value 'value' for the property key 'key'. <i>override any previous value</i>
-     *
+     * 
      * @param key
      *            the of the property
      * @param value
      *            the value of the property
      */
     protected void setProperty(String key, String value) {
-        properties.setProperty(key, value);
-        System.setProperty(key, value);
+        this.properties.put(key, value, true);
+    }
+
+    private Properties getDefaultProperties() {
+        String defaultConfigFile = ProActiveConfiguration.class.getResource(PROACTIVE_CONFIG_FILENAME)
+                .toString();
+        logger.debug("Default Config File is: " + defaultConfigFile);
+
+        return ProActiveConfigurationParser.parse(defaultConfigFile, null);
+
+    }
+
+    private Properties getUserProperties() {
+        Properties userProps = new Properties();
+
+        /* Filename of the user configuration file */
+        String fname = System.getProperty(PAProperties.PA_CONFIGURATION_FILE.getKey());
+        if (fname == null) {
+            fname = PROACTIVE_USER_CONFIG_FILENAME;
+        }
+
+        /* Check that this file exists */
+        File file = new File(fname);
+        if (file.exists()) {
+            String userConfigFile = file.getAbsolutePath();
+
+            logger.debug("User Config File is: " + userConfigFile);
+            userProps = ProActiveConfigurationParser.parse(userConfigFile, userProps);
+        } else {
+            if (fname != PROACTIVE_CONFIG_FILENAME) {
+                // don't print a warning if the default user config file does not exist 
+                logger.warn("Configuration file " + fname + " not found");
+            }
+        }
+
+        return userProps;
+    }
+
+    private Properties getsystemProperties() {
+        return System.getProperties();
     }
 }
diff --git a/src/Core/org/objectweb/proactive/core/config/xml/ProActiveConfigurationParser.java b/src/Core/org/objectweb/proactive/core/config/xml/ProActiveConfigurationParser.java
index d833fb1..4b906f0 100644
--- a/src/Core/org/objectweb/proactive/core/config/xml/ProActiveConfigurationParser.java
+++ b/src/Core/org/objectweb/proactive/core/config/xml/ProActiveConfigurationParser.java
@@ -68,6 +68,10 @@ public class ProActiveConfigurationParser {
     static final String ATTR_KEY = "key";
     static final String ATTR_VALUE = "value";
 
+    public static Properties parse(String filename) {
+        return parse(filename, null);
+    }
+
     public static Properties parse(String filename, Properties properties) {
         if (properties == null) {
             properties = new Properties();
-- 
1.5.4.1

